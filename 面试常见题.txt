
题. 如何引用一个已经定义的全局变量？
答：如果全局变量定义在一个.c文件中，要在另一个.c文件中引用。引用的方法有两种：
(1).在一个头文件中用extern将全局变量声明为外部变量，只要包含这个头文件就可以引用全局变量。
(2).如果不包含头文件，则只在在需要引用的.c文件中用extern声明全局变量为外部变量即可。
(3).如果全局变量被同名局部变量掩盖了，则使用全局使用域符号::就可以引用到全局变量而不是局部同名变量。

题. 全局变量可不可以定义在被多个.c文件包含的头文件中？为什么？
答：可以。在头文件中定义全局变量时，如果使用static修饰符修饰全局变量，则在每个包
含这个头文件的.c文件中都会生成一个同名全局变量。但是这些全局变量的作用域仅限于其
所在的.c文件中。如果不加static则链接时会报错变量重复定义。
(多说一句很重要：其实在c语言中可以在多个.c文件重复定义同一个全局变量，只要这些全局变量都未初始化，
 那么链接的时候就不会报任何错误。所以如果使用的是c编译器那么在头文件中定义全局变量将会成功编译，
 而这相当于在每个包含这个头文件的.c文件中都定义了一个同名未初始化的全局变量，很显然这将会导致程序异常。
 如果使用c++编译器，则不管这些重复定义的全局变量有没有初始化，都将会链接错误。)

题. 全局变量和局部变量的存储方式有什么区别？
答：全局变量存储在静态存储区，在程序开始执行的时候就被分配，并在程序的整个运行期
内都占有内存，当程序结束时占用的内存才会被释放。局部变量存储在栈中，当函数调用时
会给局部变量分配空间，当函数退出时释放局部变量的空间。静态局部变量的存储方式和全
变量的存储方式一样，只是它的使用域仅限于它所在的函数中。当静态局部变量所在的函数
第一次每调用时才对局部变量进行初始化。

register变量：
register变量存在CPU的寄存器中，所以register就是没有地址，因此不能对register变量取地址。
只有局部变量和函数的形参才能定义成register变量。由于register变量使用了cpu的寄存器所以
访问速度会比内存中的变量更快。
static局部变量：
static局部变量的作用域和自动变量(auto变量)的作用域一样仅限于它所在的函数，它在整
个程序的运行期都占有内存，当程序结束时才会被系统回收。c语言static局部变量的初始化
是在编译时完成的。c++的static变量如果是类的实例或者引用，则在函数第一次被调用时初始化。
static全局变量：
static全局变量的作用域在定义它的源文件中。和普通全局变量一样它在整个程序的运行期
内都占有内存，只有当程序结束时才被系统回收。和普通全局变量一样在进入main()函数前
被初始化。
static函数：
static函数的作用域仅限于定义它的源文件中。
extern全局变量：
一个全局变量被声明为extern，则说明它被定义在其它源文件中。
extern函数：
定义函数时如果不用static修饰函数，则默认就是extern函数。

题. 请问以下代码输出是什么？
void foo(void)
{
    usigned int i = 7;
    int j = -5;
    (i + j > 6) ? puts("> 6") : puts("< 6");
}
答：有符号数在和无符号数运算的时候会隐式转成无符号数，则j变成了一个非常大的正数。
所以i+j大于6。

题. 请指出下面代码不妥之外。
if(year % 4 == 0)
    if(year % 100 == 0)
        printf("%d is a leap year.", year);
else
    printf("%d is not a leap year.", year);
答：从书写上看代码的目的是让else与第一个if配对。但实际上else只会与最接近的一个if
配对。正确的代码应该写成：
if(year % 4 == 0)
{
    if(year % 100 == 0)
        printf("%d is a leap year.", year);
}
else
    printf("%d is not a leap year.", year);

题. 定义一个宏实现两个数的交换。
糟糕的做法：#define SWAP(x, y) (int z = x; x = y; y = z;) 原因是如果作用域中定义了了个
变量z则会引起重复定义的错误。
良好的做法：#define SWAP(x, y) do{x += y; y = x - y; x = x - y;}wihle(0)
或者这样：#define SWAP(x, y) do{x ^= y; y ^= x; x ^= y;}wihle(0)

题. 写一个宏函数，返回两个数中的较小者。
#define MIN(x, y) ((x) < (y) ? (x) : (y))

题. 已知一个多项式，求fn(x)的值：
n=0时：Fn(X) = 1
n=1时：Fn(X) = 2X
n>1时：Fn(X) = 2XFn-1(X) - 2(n-1)Fn-2(X)

int f(n, x)
{
    if(n == 0)
        return 1;
    else if(n == 1)
        return 2*x;
    else
    {
        return 2*x*f(n-1, x) - 2*(n-1)*f(n-2, x);
    }
}

题. 以下代码编译时会产生错误的是：
struct Test
{
    Test(){}
    Test(int){}
    void fun(){}
};
int main()
{
    Test a(1);  //语句1
    a.fun();    //语句2
    Test b();   //语句3
    b.fun();    //语句4
    return 0;
}
答：语句4会出错。以默认构造函数或者无参数构造函数在栈中实例化一个对像的正确
做法为：className obj 而 calssName obj() 的做法是错误的，这相当于定义了一个名
为obj()的函数，返回一个类的实例。所以语句3在编译时不会发现错误，只有编译到语句
4时，对函数b使用了成员调用操作时才会报错。

题. 请问下面程序打印出的结果是什么？
#include <iostream>
#include <string>
using namespace std;
class Base
{
private:
    int m_i;
    int m_j;
public:
    Base(int i): m_j(i), m_i(m_j) {}
    Base() : m_j(0), m_i(m_j) {} 
    int get_i(){return m_i;}
    int get_j(){return m_j;}
};
int main()
{
    Base obj(98);
    cout << obj.get_i() << endl
        << obj.get_j() << endl;
    return 0;
}
答：先输出一个随机数，然后输出98。原因是初始化列表的初始化变量顺序是根据成员变量
的声明顺序来执行的，因此先初始化m_i，用m_j来给m_i赋值但是此时m_j的值是个随机数。
所以m_i被赋予了随机数。然后用98来给m_j赋值。

题. 下面的类的声明正确码？为什么？
class A{
    const int Size = 0;
};
答：这个类的声明是错误的，原因是const成员变量在声明的时侯不能赋初值。应该在成员列
表初始化中赋初值。正确的声明如下：
class A{
    const int Size;
    A(): Size(0) {}
};

题. 重载和覆盖有什么区别？
答：重载是指编写一个与已有函数同名但参数数量或者参数类型不同的函数。重载不是一种
面向对像编程的方法，它只是一种语法规则，重载与多态没有什么直接关系。
当基类的虚函数在派生类中被改写，这称为覆盖(override)。派生类的中的覆盖函数必须与
原函数的函数名参数表和返回值完全一致。

c++三种继承方式：
公有继承：
(1).基类的private成员在派生类中为private成员但是不可见。基类的protected成员在派生类
中为protectedi成员，基类的public成员在派生类中为public成员。
(2).基类成员对派生类的可见性：公有成员和保护成员可见，私有成员不可见。
(3).基类成员对派生类对象的可见性：公有成员可见，私有成员和保护成员不可见。
私有继承：
(1).基类所有成员在派生类中都为private成员。派生类不能访问基类中的private成员，
但可以访问基类中的protected和public成员。
(2).基类成员对派生类的可见性：私有成员不可见，公有成员和保护成员可见。
(3).基类成员对派生类对象的可见性：所有成员都不可见。
保护继承：
(1).基类private成员在派生类中为private成员但是不可见，基类的protected成员和public
成员在派生类中都为protected成员。
(2).基类成员对派生类的可见性：私有成员不可见，保护成员和公有成员可见。
(3).基类成员对派生类对像的可见性：所有成员都不可见。

题. 找出下面程序中的错误，并分析它为什么是错的？
class Base {
public:
    int value;
    Base() {value = 1;}
}
class Derive: Base {
public:
    int value;
    Derive(int i) {value = Base::value + i}
};
int main()
{
    Derive d(10);
    cout << d.value << endl << d.Base::value << endl;
    return 0;
}
答：类的派生默认是私有派生。父类的所有成员在私有派生后都成为了子类的私有成员，所
以无法通过子类的对像直接访问到父类的成员。只要将class Derive: Base 改成
class Derive: public Base 就可以使用d.Base::value来访问基类的value成员。

題. 指出下面程序的错误，并分析为什么是错的？
class Base {
private: int i;
public: Base(int x): i(x) {}
};
class Derive : public Base {
private: int i;
public: Derive(int x, int y){i = x;}
        int get_all(void){ return i + Base::i;}
};
答：派生类的构造函数没有对基类进行初始化。应把派生类的初始化函数改成如下：
Derive(int x, int y)
    :Base(x)
    ,i(y)
{

}

c++会产生运行时开销的情况：
1. 虚基类
2. 虚函数
3. RTTI (dynamic_cast 和 typeid)
4. 异常
5. 对像的构造和析构函数

程序的各个数据区域：
栈区(stack)：由编译器自动分配和释放，存放函数的参数值、局部变量的值等。其操作
方式类似于数据结构中的栈。
堆区(heap)：一般由程序员分配和释放，若程序员不释放，程序结束时可能由操作系统
回收。栈空间的分配方式类似于链表。
全局区(静态区)(static)：全局变量和静态变量存储在一块。初始化的全局变量和初始化的
静态变量放在一块。未初始化的全局变量和未初始化的静态变量放在另一块区域。
文字常区：存放常量字符串。
程序代码区：存放二进制函数代码。

题. 进程间有哪些方式进行通信？
答：信号、信号量、消息队列、共享内存

产生死锁的条件：
1. 互斥条件：每个资源只能被一个进程使用。
2. 请求并保持条件：一个进程因请求资源而阻塞时，对已经获得的其它资源不释放。
3. 不可剥夺条件：进程已经获得的资源在使用完成并主动释放之前，不能被剥夺。
4. 循环等待条件：两个或者两个以上的进程相互等待对方的资源。
防止死锁的方法：
1. 破坏请求并保持条件：创建进程时一次性分配进程所需要的全部资源。
2. 破坏不可剥夺条件：允许进程剥夺其它进程已经获得的资源。
3. 破坏循环等待条件：给所有用到的资源编号，所有进程申请资源是必须按编号顺序申请。

题. 请描述进程与线程间的区别：
答：一个可执行程序运行时会产生一个进程，一个进程里至少有一个线程，也可以有多个线程。
进程间是相互独立的：有独立的内存空间地址，独立的上下文环境。
由于进程间的内存空间是独立的，所以无法通过全局变量、指针、函数调用等进行通信。只能
使用共享内存、消息队列、信号以及信号量等进行通信。同一个进程产生的不同线程使用同一
个内存空间，所以可以使用全局变量、指针、函数调用等进行通信。

关于scanf的原理:
1.空白符包括回车、换行、空格。
2.当程序中调用scanf从终端读取字数据时，scanf会不断从输入缓冲区读取数据。
3.如果使用%d、%u、%x、%f、%e、%G来等待数字的输入，则会忽略所有的空白字符。但是
    如果此时输入了一个非数、非空白字符，则立即停止后面其它变量的读取。此时再接
    收到一个回车则结束scanf。
4.输入两个连续的数值变量时要用空白符隔开。
    如"%d%d"，则可以这样输入：1<空格>2<回车> 或 1<回车>2<回车> 或 1<Tab>2<回车>
5.输入一个数据变量和一个字符变量时可以不用空白符隔开。
    1)如"%c%d"：则可以这样输入：A1<回车>。
               也可以这样输入：A<空格>1<回车>（等待%d时会自动忽略掉空格）。
               还可以这样输入：A<Tab>1<回车>
               还可以这样输入：A<回车>1<回车>
    2)如"%d%c"：正确的输入：1A<回车>。
                错误的输入：1<空格>A<回车> （数字1赋给了%d，空格赋给了%c）
                错误的输入：1<Tab>A<回车> （数字1赋给了%d，Tab赋给了%c）
                错误的输入：1<回车>A<回车> （数字1赋给了%d，回车赋给了%c）
    3)如"%d %c"：可以这样输入：1<n个空格>A<回车>
                 可以这样输入：1<n个Tal>A<回车>
                 可以这样输入：1<n个回车>A<回车>
    4)如"%d__what__%c"：正确输入：1__what__A<回车> （两个输入变量之间的非空白字符必须和格式化字符串中变量之间的非空白符完全一致）
6.多个scanf函数连接在一起的时侯，一个scanf读完数据后会即使没有接收到回车，也会跳到下一个scanf读数据，如下题：

题. 有输入语句:
scanf("%d%d", &x1, &x2);
scanf("%d %d", &x3, &x4);
为了给x1和x3赋值20，给x2和x4赋值为40。下列输入正确的是：
(A).20口40<回车>
    20口40<回车>
(B).2040<回车>
    2040<回车>
(C).20口40<回车>
    20,40<回车>
(D).20 40 20 40<回车>
    
答：AD
解析：正确的输入方式有两种 ：
（1）20 40 20 40<回车>
（2）20 40<回车>20 40<回车>

题. 若运行以下程序时，输入数据的形式为：25,13,10<回车> 则程序的输出为：
int main()
{
    int x, y, z;
    scanf("%d%d%d", &x, &y, &z);
    printf("x+y+z = %d\n", x+y+z);
    return 0;
}
(A). x+y+z = 48;
(B). x+y+z = 35;
(C). x+y+z = 25;
(D). 不确定
答：D

题. 为语句scanf("%d%c%d%c", &x, &ch1, &y, &ch2)赋值正确的输入是(口为空格)：
(A).8口x口9口y<回车>    (B).8,x,9,y<回车>
(C).8口x<回车>          (D).8x<回车>
    9口y<回车>              9y<回车>
答案：D
解析：正确的输入方式有两种 ：
（1）8x9y
（2）8x<回车>9y<回车>

题. 以下函数的类型为：
fun(float f, int i){/*********/}
(A). float (B).int (C).void (D).double
答：B。对于不加返回类型的函数，c语言都是默认了int类型。

题. 对以下结构体赋初值正确的是：
typedef struct {
    int n;
    struct {int a, b, c} st;
} PER;
(A). PER X[2] = {1, 8, 10, 1, 2, 8, 12, 30};
(B). PER X[2] = {{1, 8, 10, 1}, {2, 8, 12, 30}};
(C). PER X[2] = {1, {8, 10, 1}, 2, {8, 12, 30}};
(D). PER X[2] = {{1}, 8, 10, 1, {2}, 8, 12, 30};
答：ABC

题. 以下程序的输出为：
main()
{
    FILE *fp = NULL;
    int k = 0, n = 0;
    fp = fopen("myfile.txt", "w+");
    for(int i = 0; i < 3; ++i)
        fprintf("%d", i+1);
    rewind(fp);
    fscanf(fp, "%d%d", &k , &n)l;
    printf("%d %d\n", k, n);
    fclose(fp);
    return 0;
}
(A). 0 1  (B). 1 2  (C). 3 0 (D). 123 0
答：D

题. 写一个函数判断是否是素数(质数)。所谓素数是指除1和它本身外不能被其它数除。
bool isPrime(int x)
{
    for(int i = 2; i < x; ++i)
        if(x % i == 0)
            return false;
    return true;
}

题. 下列选项中均是合法浮点数的是：
(A). +1e+3 2e-2.5 05e3
(B). -e2 .8e-5 2.e-0
(C). 13e 5.5e-.8 +2e-2
(D). -.80 6e-3 -6e2 
答：按c语言规定，用指数形式表示实形数据时，e或者E之前必须要有数字，且指数
部分必须是整数。所以选D。

题. 以下能正确表示数学式       w
                         --------------
                           (x+y) * z
的C语言语句是：
int w = 2, x = 2, y = 3; 
float z = 8;
(A). w/(x+y) * 1/2;
(B). w/z/(x+y);
(C). w/(x+y)/z;
(D). w/(x+y)*z;
答：由于w x y都是int类型，所以w/(x+y)会失去小数部分，所以B才是正确答案。

题. 逻辑运行符 && 和 || 两侧运算的对像的数据类型是：
(A). 只能是整型或者字符型。
(B). 可以是任意类型数据。
(C). 只能是0或者1。
(D). 只能是0或者非0正数。
答：B

switch的条件类型：
int main(int argc, char *argv[])
{
    bool b = true;
    int i = 0;
    char c = 'c';
    enum{Monday, Tuesday} day; 
    day = Monday;
    float f = 0.1f;

    /* switch(b)       //正确 */
    /* switch(i)       //正确 */
    /* switch(c)       //正确 */
    /* switch(day)     //正确 */
    switch(f)       //错误，浮点数不能作为switch的条件
    {
        /* case true: printf("b:%d\n", b); break; */
        /* case 0: printf("i:%d\n", i); break; */
        /* case 'c': printf("char: %c\n", c); break; */
        /* case Monday: printf("Monday\n"); break; */
        case 0.1: printf("%f\n", f); break;
        default: continue;  //错误，continue只能在循环中使用
    }
}

题. 以下选项中非法的字符串常量是：
(A). "a:\\"
(B). "\tab"
(C). "\x16"
(D). "not't"
答：D

题. 以下程序运行结果正确的是：
#define K1 4
#define K2 K1+2
#define K3 3*K2
int main()
{
    int sum = 0;
    for(int i = K3; i > 0; i--)
        ++sum;
    printf("%d\n", sum);
}
(A).12 (B).14 (C).16 (D).18
答：B

题. 在深度为5的完全二叉树中，叶子结点的个数最多为：
答：2^(5-1) = 16

题. 以下程序的输出为：
int main()
{
    short i = -4;
    printf("dec:%d oct:%o hex:%x usinged:%u\n", i, i, i, i);
    return 0;
}
答：(1). dec:-4不解释。
(2). 由于8进制和16进制不区分正负所以将-4转无符号数为65532。
65532 % 8 = 4, 65532 / 8 = 8191
8191 % 8 = 7, 8192 / 8 = 1023
1023 % 8 = 7, 1023 / 8 = 127
127 % 8 = 7, 127 / 8 = 15
15 % 8 = 7, 15 / 8 = 1
所以oct:177774
(3). hex:fffc。由于 short -1 = 0xffff, 所以 short -4 = 0xfffc
(4). unsigned:65532。由于 short -1 强转成 unsigned short 时为 65535，所以 short -4
强转 unsigned short 为 65532。

题. 以下程序的输出是：
int main()
{
    int a = 0; b = 2, c = 3;
    switch(a)
    {
        case 0: switch(b == 2)
                {
                    case 1: printf("&"); break;
                    case 2: printf("%%"); break;
                }
        case 1: switch(c)
                {
                    case 1: printf("$"); break;
                    case 2: pfrintf("*"); break;
                    default: printf("#");
                }
    }
    printf("\n");
}
答：&#

int main(int argc, char *argv[])
{
    char a[] = "1234", b[5] = "";
    strcpy(b, a);
    a[1] = 0;
    b[1] = '0';
    printf("%s%s\n", a, b);
    return 0;
}
答：字符0即是尾零'\0'，而'0'是数字0的ASCII。所以答案是：11034

题. 在C语言中，要求运算符必须为整数的运算符是：
(A). / (B). ++ (C). % (D). =
答：C

题. 设有以下定义 char *a = "123456789"; 以下关于strcpy函数的运用正确的是：
(A). char b[10], *s; strcpy(s=b+1, a+1);
(B). char b[10]; strcpy(++b, &a[1]);
(C). char b[10], *s; strcpy(b+5, a);
(D). char b[10]; strcpy(b, a[4]);
答：A正解。B错在b是数组名不是指针变量，不能重新赋值，也不能自增自减。
C错在数组越界。D错在a[4]是一个字符而不是指针。

题. 有函数：int max(int a, int b){return a > b ? a : b;}
int main()
{
    int a = 1, b = 2;
    int (*f)(int, int);
    f = max;
    ...
    return 0;
}
请问正确的调用语句为：
(A). *f(a, b);
(B). (*f)max(a, b);
(C). (*f)(a, b);
(D). f(a, b);
答：C、D

题. 请问以下代码的输出为：
int main(int argc, char *argv[])
{
    int v1 = 0, v2 = 0;
    char ch, *s = "china";
    while((ch = *s++) != '\0')
    {
        switch(ch)
        {
            case 'a':
            case 'n':
            default: v1++;
            case 'h': v2++;
        }
    }
    printf("v1 = %d, v2 = %d\n", v1, v2);
    return 0;
}
答：v1 = 4, v2 = 5
解析：可以这样理解：
if(ch == 'a')
    goto case 'a';
else if(ch == 'n')
    goto case 'n';
else if(ch == 'h')
    goto case 'h';
else
    goto default;

题. 请问以下的输出为：
int main()
{
    int aa[3][3] = {{1}, {3}, {5}};
    int (*p)[3] = aa;
    for(int i = 0; i < 3; ++i)
    {
        for(int j = 0; j < 2; ++j)
            aa[i][j+1] = (*(p+i))[0] + 1;
    }
    for(int i = 0; i < 3; ++i)
    {
        for(int j = 0; j < 3; ++j)
            printf("%d ", aa[i][j]);
        printf("\n");
    }
    return 0;
}
答：
首先区别：
a[3][3] = {1, 3, 5} <--> a[3][3] = {{1, 3, 5}, {0, 0, 0}, {0, 0, 0}}
a[3][3] = {{1}, {3}, {5}} <--> a[3][3] = {{1, 0, 0}, {3, 0, 0}, {5, 0, 0}}
再区别：
int (*p)[3] = aa; ++p; ------> p == aa[1]
int *p = aa; p++; ------> p == aa[0][1]
然后就可得答案为：1 2 2
                  3 4 4
                  5 6 6

题. 可以将char型变量ch中的字母进行大小写互换的是：
(A). ch = ch ^ 32;
(B). ch = ch + 32;
(C). ch = ch | 32;
(D). ch = ch & 32;
答：小写字母 - 对应大写字母 = 32。而2的5次方等于32，所以小写字母与大写字母的区别
是二进行的第5位，小写字母第5位为1，大写字母第5位为0。所以答案选A。

题. 下面的程序会在哪一行崩溃？
struct s {
    int i;
    int *p;
};
int main()
{
    S s;
    int *p = &s.i;
    p[0] = 4;
    p[1] = 3;
    s.p = p;
    s.p[1] = 1;
    s.p[0] = 2;
}
答：执行 s.p = p 后 s.p == &s.i，所以s.p[1]相当于*(&s.i + 1) = 1，所以s.p == 1。
然后s.p[0] = 2相当于*((int *)1) = 2;所以在最后一句s.p[0]。所以在 s.p[0] = 2 会崩溃。

题. 写出下面程序的输出。
int main()
{
    int a[] = {1, 2, 3, 4, 5};
    int *ptr = (int *)(&a + 1);
    printf("%d %d\n", *(a + 1), *(ptr - 1));
    return 0;
}
答：要区分 a+1 和 &a+1 的区别：
由 a[0] == 1，a[1] == 2 得出 a == &a[0]，a+1 == &a[1] ...
而 &a 得到指向数组的指针，&a + 1 == &a[sizeof(a)/sizeof(a[0])]
所以输出为：2 5。

题. 以下定义是否有错，错在哪里？
struct Bit_Field{
    int a: 1;
    int b: 3;
    int c: 33;
};
答：int c: 33; 这句是错的。位段的一个成员占的位的数量不能超过一个int所含的位的数量。

题. 请问以下定义的类型的大小是多少？ 
struct bit_field{
    int a: 1;
    int b: 3;
    int c: 30;
    int d: 32;
};
答：a和b占了第一个int的前4位剩下28个位，而c大小为30个位，所以c要占用另一个int的前30位。
d同理要占用第三个int的全部空间。所以sizeof(struct bit_field) == sizeof(int) * 3;

题. 表达式 13 * 16 = 244 是用什么进制表示的？
解析：假设是x进制表示的(以下^表示乘方)：
1*x^1 + 3*x^0 = 13;
1*x^1 + 6*x^0 = 16;
2*x^2 + 4*x^1 + 4*x^0 = 244;
13 * 16 = 244 ----> x*x + 6*x + 3*x + 3*6 = 2*x^2 + 4*x^1 + 4*x^0;
----> x^2 + 9x + 18 = 2x^2 + 4x + 4 ----> x^2 - 5x - 14 = 0 
----> x = -2 或者 x = 7
答：使用了7进制表示。

题. 下面的数据声明代表什么？
(l). float (**def)[10];
(2). double *(*gh)[10];
(3). double (*f[10])();
(4). int *((*b)[10]);
(5). long (*fun)(int);
(6). int (*(*f)(int, int))(int);
答：(1). def是一个二级指针，指向一个一维数组的指针，一维数组有10个float元素。
(2). gh是一个一级指针，指向一维数组，数组里有10个double *指针。
(3). f是一个数组。数组里的元素是函数指针，函数指针指向的函数的参数类型为void，返回值类型为double。
(4). b是一维数组的指针。b指向的数组里有10个 int * 类型的元素。定义相当于 int *(*b)[10];
(5). fun是一个函数指针。fun指向的函数的参数类型为int，返回值类型为long。
(6). f是一个函数指针，f指向的函数有两int类型的参数，返回值为一个函数指针。返回的
函数指针指向的函数有一个int类型的参数，返回值为int。
    
数组和指针相同和相异的地方：
#define N 6
int a[N] = {1, 2, 3, 4, 5, 6};
int b[N] = {7, 8, 9, 10, 11, 12};
int *p = a;
(1).由 a[1] = p[1] 所以 *(a+1) = *(p+1) --> a+1和p+1指向同一块内存。
(2). sizeof(a) = sizeof(int) * N --> sizeof(array)能求出数组的所有元素的大小和。
     sizeof(p) = sizeof(void *)  --> sizeof(pointer)求出的是指针本身的大小。
(3). &a + 1 = &p[N] --> 对数组取地址得到的是一个指向数组的指针，该指针加1则指向下一个数组的起始位置。
(4). p++是正确的语法，a++是错误的语法，a = b也是错误的语法。原因是数组的名字不是
指针，它只是一个名字不是变量不占有内存，无法对数组的名字赋值或者自加自减。

满二叉树：
在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子结点都在同一层
上，则这样的二叉树就称为满二叉树。
完全二叉树：
如果一棵具有n个结点的二叉树的结构与满二叉树的前n个结点的结构相同，这样的二叉树称为完全二叉树。

面向对像的4个要素：抽像、封装、继承、多态

题：请写一个函数求本地字节序
答：typedef enum{big_endian, little_endian} ENDIAN;
ENDIAN localEndian(void)
{
    int i = 1;
    return *(char *)&i == 1 ? little_endian : big_endian;
    /* return (ENDIAN)*(char *)&i; */
}
/*
 * ENDIAN localEndian(void)
 * {
 *     static int i = 1;
 *     static ENDIAN endian = (ENDIAN)*(char *)&i;
 *     return endian;
 * }
 */
